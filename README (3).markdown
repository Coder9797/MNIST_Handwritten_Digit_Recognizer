# MNIST Handwritten Digit Recognizer

## Overview
This project implements a real-time handwritten digit recognition system using a Convolutional Neural Network (CNN) trained on the MNIST dataset. It leverages OpenCV for live video feed processing and PyTorch for the neural network model. The system allows users to draw digits using a green object (tracked via HSV color range) and predicts the digit using the trained CNN model.

## Features
- **Real-time Digit Drawing**: Draw digits in the air using a green object, captured via webcam.
- **HSV Color Tracking**: Uses OpenCV to track a green object and create a digital canvas for drawing.
- **CNN Model**: A PyTorch-based CNN model trained on the MNIST dataset for digit classification.
- **Live Prediction**: Recognizes and displays the predicted digit when the user presses the 'p' key.
- **Model Evaluation**: Includes scripts to evaluate the model's performance on the MNIST test dataset, with accuracy, confusion matrix, and classification metrics.
- **Interactive Interface**: Clear canvas with 'c' key, save HSV values with 's' key, and exit with 'ESC'.

## Project Structure
- **hsv_file.py**: Sets up the webcam feed and creates trackbars to adjust HSV values for green object detection. Saves selected HSV ranges to `hsv_value.npy`.
- **model.ipynb**: Defines the `DigitCNN` class, a CNN model with three convolutional layers and two fully connected layers for digit classification.
- **Live Writing.py**: Integrates the HSV tracking and CNN model for real-time digit recognition. Processes the drawn digit and displays predictions.
- **Inference.ipynb**: Evaluates the trained model on the MNIST test dataset, providing accuracy, confusion matrix, and classification metrics (precision, recall, F1-score).
- **cnn_model_weights.pth**: Pre-trained model weights for the `DigitCNN` model (not included in the provided files but required for `Live Writing.py` and `Inference.ipynb`).
- **hsv_values.npy**: Stores the HSV range for green object detection (generated by `hsv_file.py`).
- **mnist_test.csv**: MNIST test dataset in CSV format (required for `Inference.ipynb`).

## Requirements
- Python 3.12
- Libraries:
  ```bash
  pip install opencv-python numpy torch torchvision pandas matplotlib seaborn scikit-learn import-ipynb
  ```
- Hardware:
  - Webcam for live video feed.
  - Green object (e.g., a marker or cloth) for drawing.

## Installation
1. Clone the repository or download the project files.
2. Install the required libraries:
   ```bash
   pip install -r requirements.txt
   ```
3. Ensure the following files are available:
   - `cnn_model_weights.pth` (pre-trained model weights).
   - `mnist_test.csv` (MNIST test dataset).
   - `hsv_values.npy` (generate using `hsv_file.py` if not available).

## Usage
1. **Calibrate HSV Values**:
   - Run `hsv_file.py` to open the webcam feed and adjust HSV trackbars to detect the green object:
     ```bash
     python hsv_file.py
     ```
   - Adjust the trackbars (`L - H`, `L - S`, `L - V`, `U - H`, `U - S`, `U - V`) to isolate the green object in the mask.
   - Press 's' to save the HSV values to `hsv_values.npy` or 'ESC' to exit.

2. **Run Live Digit Recognition**:
   - Run `Live Writing.py` to start the real-time digit recognition:
     ```bash
     python "Live Writing.py"
     ```
   - Draw digits in the air using the green object. The canvas displays the drawing.
   - Press 'p' to predict the drawn digit (displays the prediction on the frame and console).
   - Press 'c' to clear the canvas.
   - Press 'ESC' to exit.

3. **Evaluate Model Performance**:
   - Open `Inference.ipynb` in Jupyter Notebook.
   - Run the cells to load the model, evaluate it on `mnist_test.csv`, and generate:
     - Accuracy (e.g., 99.21%).
     - Confusion matrix visualization.
     - Classification report with precision, recall, and F1-score.
     - Misclassified digit examples.

## Model Architecture
The `DigitCNN` model (defined in `model.ipynb`) consists of:
- **Input**: Grayscale images (1x28x28).
- **Layers**:
  - Conv1: 1 -> 32 filters, 3x3 kernel, ReLU, MaxPool (2x2).
  - Conv2: 32 -> 64 filters, 3x3 kernel, ReLU, MaxPool (2x2).
  - Conv3: 64 -> 128 filters, 3x3 kernel, ReLU, MaxPool (2x2).
  - FC1: 128*3*3 -> 256, ReLU, Dropout (0.3).
  - FC2: 256 -> 10 (output classes).
- **Output**: Probabilities for digits 0-9.

## Performance
- **Test Accuracy**: 99.21% on the MNIST test dataset (as shown in `Inference.ipynb`).
- **Metrics** (macro average):
  - Precision: 0.9920
  - Recall: 0.9920
  - F1 Score: 0.9920

## Notes
- Ensure the green object is well-lit and distinct from the background for accurate tracking.
- The `cnn_model_weights.pth` file must be present in the project directory for `Live Writing.py` and `Inference.ipynb` to work.
- If `hsv_values.npy` is missing, run `hsv_file.py` to generate it.
- The MNIST test dataset (`mnist_test.csv`) is required for evaluation